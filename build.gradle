buildscript {
    // Fix a bug with shadow plugin having an outdated dependency.
    dependencies {
        constraints {
            ["asm", "asm-util", "asm-tree", "asm-analysis"].each {
                classpath("org.ow2.asm:$it") {
                    version { require("9.1") }
                    because("Fabric's TinyRemapper requires ASM 9")
                }
            }
        }
    }
}

plugins {
    id 'fabric-loom' version '0.6-SNAPSHOT'
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.cadixdev.licenser' version '0.5.0'
}

import net.fabricmc.loom.task.RemapJarTask

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name + "-fabric"
Set<String> modules = [
        'fabric-renderer-api-v1',
        'fabric-renderer-indigo',
        'fabric-resource-loader-v0'
]

// This field defines the Java version your mod target.
// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too.
def targetJavaVersion = 8

def getMCVersionString() {
    if (project.minecraft_version.matches("\\d\\dw\\d\\d[a-z]")) {
        return project.minecraft_version
    }
    int lastDot = project.minecraft_version.lastIndexOf('.')
    return project.minecraft_version.substring(0, lastDot)
}

minecraft {
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name 'AperLambda'
        url 'https://aperlambda.github.io/maven'
    }
    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/releases'
    }
    maven {
        name 'Jitpack'
        url 'https://jitpack.io'
        content {
            excludeGroupByRegex('io\\.github.*')
        }
    }
    flatDir {
        dirs "lib"
    }
}

configurations {
    shadow
    api.extendsFrom shadow
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modules.stream().map { fabricApi.module(it, project.fabric_api_version) }.forEach {
        modImplementation it
    }

    modImplementation "com.github.lambdaurora:spruceui:${project.spruceui_version}"
    include "com.github.lambdaurora:spruceui:${project.spruceui_version}"

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
        transitive = false
    }

    shadow "com.electronwill.night-config:core:3.6.3"
    shadow "com.electronwill.night-config:toml:3.6.3"
}

java {
    sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
    targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"

    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

license {
    header file('HEADER')
    include '**/*.java'
}

shadowJar {
    dependsOn jar
    configurations = [project.configurations.shadow]
    archiveClassifier.set('dev')

    relocate 'com.electronwill.nightconfig', 'dev.lambdaurora.lambdabettergrass.shadow.nightconfig'
}

task shadowRemapJar(type: RemapJarTask) {
    dependsOn shadowJar

    input.set(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar"))
    archiveFileName = "${archivesBaseName}-${project.version}.jar"
    addNestedDependencies.set(true)
}
build.dependsOn(shadowRemapJar)

// Configure the maven publication.
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            pom {
                name = "LambdaBetterGrass"
                description = "Adds actual better grass to the game."
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.shadow.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')

                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'compile')
                }
            }
        }
    }

    repositories {
        mavenLocal()
        maven {
            name = "BuildDirLocal"
            url = "$buildDir/repo"
        }
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/LambdAurora/LambdaBetterGrass")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}
